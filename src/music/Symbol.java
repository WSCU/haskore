package music;/** * The Functional Music project * @author Western State College, CIS412 class */import java.util.ArrayList;public class Symbol {    private String body;    private boolean music;    public int hashVal;    private static ArrayList<Symbol> symbols;    public static Symbol openParen;    public static Symbol closedParen;    public static Symbol openBracket;    public static Symbol closedBracket;    public static Symbol comma;    public static Symbol equals;    public static Symbol semicolon;    public static Symbol underscore;    public static Symbol plusop;    public static Symbol subop;    public static Symbol ampop;    public static Symbol bangop;    public static Symbol equalop;    public static Symbol mulpop;    public static Symbol divop;    public static Symbol powop;    public static Symbol modop;    public static Symbol ifKeyword; // as in, it is an IF-KEYWORD, not a question    public static Symbol thenKeyword;    public static Symbol elseKeyword;    public static Symbol trueKeyword;    public static Symbol falseKeyword;    public static Symbol dotop;    public static Symbol composefn;    /**     * Creates a new symbol with a string for the body     * @param body the body information for the symbol     */    // Todo: Use the hashcode for the original search of the symbol space    private Symbol(String body,boolean music) {        this.body = body;        hashVal = 1;        for (int i = 0; i < body.length(); i++) {            hashVal = (67 * hashVal + 5 * (int) body.charAt(i)) % 1009;        }        this.music=music;    }    /**     * Gets the string for the body     * @return returns the body from the symbol     */    public String getBody() {        return this.body;    }    /**     * Checks to see if the symbol body is the same as the string its being compared to     * If if is, it returns the symbol. if not, it creates a new symbol with the string     * and adds it to the list.     * PERFORMANCE COULD POSSIBLY RUN SLOW (O(n*n)), IF SO TURN INTO HASH     * @param str String that is being compared to the body of the symbol     * @return returns the symbol     */    public static Symbol toSymbol(String str) {        for (Symbol s : symbols) {            //System.out.println(str + " == " + s.body);            if (s.body.equals(str)) {                //System.out.println("equal");                return s;            }            //System.out.println("not equal");        }        Symbol s = new Symbol(str,false);        symbols.add(s);        //System.out.println("Added " + s);        return s;    }    public static Symbol toSymbol(String str, boolean music) {        for (Symbol s : symbols) {            //System.out.println(str + " == " + s.body);            if (s.body.equals(str)) {                //System.out.println("equal");                return s;            }            //System.out.println("not equal");        }        Symbol s = new Symbol(str,music);        symbols.add(s);        //System.out.println("Added " + s);        return s;    }        public boolean isMusic()        {            return music;        }        public static boolean isSymbol(String str) {            for (Symbol s : symbols) {                if (s.body.equals(str))return true;            }            return false;        }    /**     * Uses the toSymbol method to check to see if any of the predefined symbols are      * in the list.     * MUST BE CALLED AT PROGRAM INITIALIZATION     */    public static void init() {        symbols = new ArrayList<Symbol>();        openParen = toSymbol("(");        closedParen = toSymbol(")");        openBracket = toSymbol("[");        closedBracket = toSymbol("]");        comma = toSymbol(",");        equals = toSymbol("=");        semicolon = toSymbol(";");        underscore = toSymbol("_");        plusop = toSymbol("+");        subop = toSymbol("-");        ampop = toSymbol("&");        bangop = toSymbol("!");        equalop = toSymbol("==");        mulpop = toSymbol("*");        divop = toSymbol("/");        powop = toSymbol("^");        modop = toSymbol("%");        ifKeyword = toSymbol("if"); //        thenKeyword = toSymbol("then"); //        elseKeyword = toSymbol("else");        trueKeyword = toSymbol("True");        falseKeyword = toSymbol("False");        dotop = toSymbol(".");        composefn = toSymbol("composefn");    }    //Used in JUnit Test Only    public boolean equals(Symbol s) {        return body.equals(s.body);    }    /**     * Sets the body of the symbol     * @return returns the string for the body     */    @Override    public String toString() {        return body;    }}