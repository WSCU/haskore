package music;import java.util.ArrayList;/** * The Functional Music project * @author Western State College, CIS412 class */// I'm bad: I should have factored out the hash table - jcppublic class EnvHash extends Env {    public int hashSize;    public ArrayList<Pair<Symbol, Thunk>> hashTable;    public Env parent;    public EnvHash(int size, Env parent) {        this.hashSize = size;        this.hashTable = new ArrayList<Pair<Symbol, Thunk>>(size);        for (int i = 0; i < size; i++) {            hashTable.add(null);        }        this.parent = parent;    }    public void add(Symbol s, Thunk t) {        int where = s.hashVal % hashSize;        // Should check if the table is full to be careful        while (hashTable.get(where) != null)            where = (where + 1) % hashSize;        hashTable.set(where, new Pair<Symbol, Thunk>(s,t));    }    @Override    public Value eval(Symbol s) {        int where = s.hashVal%hashSize;        Pair<Symbol, Thunk> p;        while ((p = hashTable.get(where)) != null && p.first != s)            where = (where + 1) % hashSize;        if (p == null) {            if (parent == null) throw new ExecutionError("Unbound Variable:"+s.toString());            return parent.eval(s);        }        return p.second.eval();    }    }