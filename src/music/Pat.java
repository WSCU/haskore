package music;/** * The Functional Music project * @author Western State College, CIS412 class */public abstract class Pat extends ParsedObject {    //methods to check what type of Pat, for typecasting    @Override    /**     * Typecasting validity Method.  Overrides the default method in the      * ParsedObject class.     * @return True, as this class and all of it's subclasses are Pats(Patterns)     */    public boolean isPat() {        return true;    }    /**     * Typecasting validity Method.  This allows safe typecasting since every     * subclass overrides the default as necessary.     * @return Default is false unless overrided by a subclass     */    public boolean isVar() {        return false;    }    /**     * Typecasting validity Method.  This allows safe typecasting since every     * subclass overrides the default as necessary.     * @return Default is false unless overrided by a subclass     */    public boolean isConst() {        return false;    }    /**     * Typecasting validity Method.  This allows safe typecasting since every     * subclass overrides the default as necessary.     * @return Default is false unless overrided by a subclass     */    public boolean isTuple() {        return false;    }    /**     * Typecasting validity Method.  This allows safe typecasting since every     * subclass overrides the default as necessary.     * @return Default is false unless overrided by a subclass     */    public boolean isList() {        return false;    }    /**     * Typecasting validity Method.  This allows safe typecasting since every     * subclass overrides the default as necessary.     * @return Default is false unless overrided by a subclass     */    public boolean isAny() {        return false;    }    public Symbol asVar() {        if (this.isVar()) {            PatVar p = (PatVar) this;            return p.body.symbol;        } else {            System.out.println("Execution error in asVar() class: Pat");            return null;        }    }}