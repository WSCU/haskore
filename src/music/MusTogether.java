package music;import java.util.ArrayList;import java.util.logging.Level;import java.util.logging.Logger;/** * The Functional Music project * @author Western State College, CIS412 class */public class MusTogether extends Music {    Music top;    Music bottom;    public MusTogether() {    }    public MusTogether(Music top) {        this.top = top;    }    public MusTogether(Music top, Music bottom) {        this.top = top;        this.bottom = bottom;    }    public BigRational perform(BigRational time, Modifier modifier, ArrayList<MusNote> notes) {        this.top.perform(time, modifier, notes);        return this.bottom.perform(time, modifier, notes);    }    public String toString() {        return "MusTogether (" + this.hashCode() + "): playing " + top.hashCode() + " ! " + bottom.hashCode();    }    public String prettyPrint() {        return "MusTogether(" + this.hashCode() + "): " + top.prettyPrint() + " ! " + bottom.prettyPrint();    }    public static Music musTogether(Music m1, Music m2) {        return new MusTogether(m1, m2);    }        public Music rev(){        try {            BigRational td = this.top.dur();            BigRational bd = this.bottom.dur();            int topd = td.toInt();            int botd = bd.toInt();            BigRational max = BigRational.max(td, bd);            System.out.println("TOG REV "+max.equals(td) +"<>"+max.equals(bd));            if(max.equals(td))            {               System.out.println("MUSIC DURATION TOGETHER:--top--"+td.toInt()+" --bottom--"+bd.toInt()+"  "+td.minus(bd).toInt());               MusNote er = Music.rest(td.minus(bd));                              MusAfter bt = new MusAfter(er, this.bottom.rev());               return new MusTogether(bt,this.top.rev());            }            else            {               System.out.println("MUSIC DURATION TOGETHER:--top--"+td.toInt()+" --bottom--"+bd.toInt()+"  "+bd.minus(td).toInt());               MusNote er = Music.rest(bd.minus(td));               MusAfter tt = new MusAfter(er, this.top.rev());               return new MusTogether(tt,this.bottom.rev());            }                                } catch (Exception ex) {            System.out.println(ex.getMessage());            return this;        }    }    @Override    public BigRational dur() {            BigRational td = this.top.dur();            BigRational bd = this.bottom.dur();            return BigRational.max(td, bd);      }    }