package music;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.logging.Level;import java.util.logging.Logger;import javax.sound.midi.*;/** * The Functional Music project * @author Western State College, CIS412 class */public class MusNote extends Music {    //Duration and Velocity may become Rationals, but they will stay in doubles    //for now.    public static ArrayList<String> instruments = new ArrayList<String>();    public int pitch;    public double duration;    public String instrument;    public int velocity;    public double absolute;           public MusNote(int pitch, double duration, int velocity, String instrument)    {        this.pitch = pitch;        this.duration = duration;        this.velocity = velocity;        this.instrument = instrument;        this.absolute = 0;    }    public static MusNote empty(){        return new MusNote(0,0,0,"piano");    }    public MusNote(int pitch)    {        this.pitch = pitch;        this.duration = 1;        this.velocity = 1;        this.instrument = "piano";    }    public MusNote(int pitch, double duration, int velocity, String instrument, double absolute)    {        this.pitch = pitch;        this.duration = duration;        this.velocity = velocity;        this.instrument = instrument;        this.absolute = absolute;    }    public MusNote(MusNote note)    {        this.pitch = note.pitch;        this.duration = note.duration;        this.velocity = note.velocity;        this.instrument = note.instrument;        this.absolute = note.absolute;    }        public Performance perform(double time, Modifier modifier)    {        // had to use try catch maybe can claean up later        try {            initInstruments();        } catch (InvalidMidiDataException ex) {            Logger.getLogger(MusNote.class.getName()).log(Level.SEVERE, null, ex);        } catch (IOException ex) {            Logger.getLogger(MusNote.class.getName()).log(Level.SEVERE, null, ex);        }        //end of edit, origional was just => initInstruments();        Performance result = new Performance();        MusNote resNote = new MusNote(this);        resNote.absolute = time;        result.add(modifier.applyMod(resNote));        return result;    }    public static Soundbank getMySoundbank(File b) throws InvalidMidiDataException, IOException{        //File bank = new File("S:\\music\\soundbak-mid.gm");        Soundbank s = MidiSystem.getSoundbank(b);        return s;    }        //Fills the instruments variable with all of the available instruments.    //Until a design decision is reached regarding instrumentation limitations,     //this works.    public void initInstruments() throws InvalidMidiDataException, IOException{        try {            Synthesizer synth = MidiSystem.getSynthesizer();            synth.open();            synth.loadAllInstruments(synth.getDefaultSoundbank());            //synth.loadAllInstruments(soundbank);            synth.getLoadedInstruments();            Instrument[] instr = synth.getAvailableInstruments();            for (int i = 0; i < instr.length; i++) {                instruments.add(i, instr[i].getName());                //System.out.println(instruments.get(i));            }        } catch (MidiUnavailableException ex) {            throw new Error("Midi Instrument error!");        }    }        public ArrayList<Integer> getInstruments() throws InvalidMidiDataException, IOException{        initInstruments();        ArrayList<Integer> result = new ArrayList<Integer>();        result.add(instruments.indexOf(instrument));        if (instruments.indexOf(instrument) < 0)            throw new Error("Instrument not found!");        return result;    }    public String toString() {        return "Note ("+this.hashCode()+")";    }    public String prettyPrint() {        return "Note of pitch " + pitch +", on a " + instrument +                " for duration of "+duration+ " with velocity "+velocity +                ".  Absolute time of " + absolute;    }    /**     * Compares the Absolute, Duration and Pitch of this and x for debugging      * purposes.     *      * @param x The MusNote to be compared.     * @return true if the absolute, duration and pitch are the same, false otherwise.     */    public boolean compare(MusNote x)    {        boolean same = true;        if( x == null){            System.out.println("The note is null");            return false;        }        if( x.absolute != absolute){            same = false;            System.out.println("Absolutes are not equal");        }        if( x.duration != duration ){            same = false;            System.out.println("Durations are not equal");        }        if( x.pitch != pitch ){            same = false;            System.out.println("Pitches are not equal");        }        if( x.velocity != velocity ){            same = false;            System.out.println("Velocities are not equal");        }        if( !x.instrument.equals(instrument) ){            same = false;            System.out.println("Instruments are not equal");        }        return  same;    }    public static void main(String[] args){        MusNote note1 = new MusNote(50,0.5, 50, "Piano");        MusNote note2 = new MusNote(60,0.5, 50, "Piano");        MusAfter after = new MusAfter(note1, note2);        Performance perform = after.perform(0, new Modifier());        perform.writeToFile("C:\\test.midi");    }}