package music;import java.util.ArrayList;/** * The Functional Music project * @author Western State College, CIS412 class */public class Modifier {    public int pitchOffset;    public int pitchOverride;    public BigRational durationMultiplier;    public int velocityOverride;    public int velocityMultiplier;    public String instrumentChange;    public Modifier() {        pitchOffset = 0;        pitchOverride = -1;        durationMultiplier = BigRational.ONE;        velocityOverride = -1;        velocityMultiplier = 1;        instrumentChange = null;    }    public Modifier(int pitchOffset, BigRational durationMultiplier, BigRational velocityMultiplier, String instrumentChange) {        this.pitchOffset = pitchOffset;        this.durationMultiplier = durationMultiplier;        this.velocityMultiplier = velocityMultiplier.toInt();        this.instrumentChange = instrumentChange;    }    public Modifier(Modifier mod) {        this.pitchOffset = mod.pitchOffset;        this.pitchOverride = mod.pitchOverride;        this.durationMultiplier = mod.durationMultiplier;        this.velocityMultiplier = mod.velocityMultiplier;        this.velocityOverride = mod.velocityOverride;        this.instrumentChange = mod.instrumentChange;    }    public Modifier combine(Modifier mod) {        Modifier result = new Modifier(this);        result.pitchOffset += mod.pitchOffset;        result.pitchOverride = mod.pitchOverride;        result.durationMultiplier=result.durationMultiplier.times(mod.durationMultiplier);        result.velocityMultiplier *= mod.velocityMultiplier;        result.velocityOverride = mod.velocityOverride;        result.instrumentChange = mod.instrumentChange != null ? instrumentChange : this.instrumentChange;        return result;    }    public ArrayList<MusNote> applyMod(ArrayList<MusNote> input) {        ArrayList<MusNote> notes = new ArrayList<MusNote>();        for (MusNote musNote : input) {            notes.add(musNote);        }        for (MusNote note : notes) {            note.pitch = pitchOverride >= 0 ? pitchOverride : (int) (note.pitch + pitchOffset);            note.duration=note.duration.times(durationMultiplier);            note.instrument = instrumentChange != null ? instrumentChange : note.instrument;            note.velocity = velocityOverride >= 0 ? velocityOverride : (int) (note.velocity * velocityMultiplier);        }        return notes;    }    public MusNote applyMod(MusNote note) {        note.pitch = pitchOverride >= 0 ? pitchOverride : (note.pitch + pitchOffset);        note.duration = note.duration.times(durationMultiplier);        note.instrument = instrumentChange != null ? instrumentChange : note.instrument;        note.velocity = velocityOverride >= 0 ? velocityOverride : (int) (note.velocity * velocityMultiplier);        return note;    }    public String toString() {        return "Modifer(" + this.hashCode() + ")";    }    public String prettyPrint() {        return "Modifier with pitchOffset of " + pitchOffset + ", durationMultiplier of " +                durationMultiplier + ", instrumentChange of " + instrumentChange +                " velocityOverride of " + velocityOverride + ", velocityMultiplier of " + velocityMultiplier;    }}